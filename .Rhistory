mutate(across(cols, ~ case_when(
. < range[1] ~ colors[1],
. >= range[1] & . < range[2] ~ colors[2],
. >= range[2] ~ colors[3]
),
.names = "{.col}.color"
))
color_cols <- data |>
select(tidyselect::contains(".color")) |>
names()
stopifnot(!identical(color_cols, character(0)))
data <- x[[1]]
View(data)
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
data <- x[[1]]
x[[1]] <- data |>
mutate(across(cols, ~ case_when(
. < range[1] ~ colors[1],
. >= range[1] & . < range[2] ~ colors[2],
. >= range[2] ~ colors[3]
),
.names = "{.col}.color"
))
color_cols <- x[[1]] |>
select(tidyselect::contains(".color")) |>
names()
stopifnot(!identical(color_cols, character(0)))
for (color_col in color_cols) {
target_col <- gsub(pattern = ".Color", replacement = "", color_col)
for (specific_color in unique(data[[color_col]])) {
x <- x |>
tab_style(
style = cell_fill(color = case_when(
specific_color == "green" ~ "palegreen3",
specific_color == "yellow" ~ "lightgoldenrodyellow",
specific_color == "red" ~ "darksalmon"
)),
locations = cells_body(
columns = target_col,
rows = .data[[{{ color_col }}]] == specific_color
)
)
}
}
x[[1]] <- x[[1]] |>
select(-c(color_cols))
x
View(x)
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
data <- x[[1]]
x[[1]] <- data |>
mutate(across(cols, ~ case_when(
. < range[1] ~ colors[1],
. >= range[1] & . < range[2] ~ colors[2],
. >= range[2] ~ colors[3]
),
.names = "{.col}.color"
))
color_cols <- x[[1]] |>
select(tidyselect::contains(".color")) |>
names()
stopifnot(!identical(color_cols, character(0)))
View(x)
for (color_col in color_cols) {
target_col <- gsub(pattern = ".color", replacement = "", color_col)
for (specific_color in unique(data[[color_col]])) {
x <- x |>
tab_style(
style = cell_fill(color = case_when(
specific_color == "green" ~ "palegreen3",
specific_color == "yellow" ~ "lightgoldenrodyellow",
specific_color == "red" ~ "darksalmon"
)),
locations = cells_body(
columns = target_col,
rows = .data[[{{ color_col }}]] == specific_color
)
)
}
}
x[[1]] <- x[[1]] |>
select(-c(color_cols))
x
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
data <- x[[1]]
x[[1]] <- data |>
mutate(across(cols, ~ case_when(
. < range[1] ~ colors[1],
. >= range[1] & . < range[2] ~ colors[2],
. >= range[2] ~ colors[3]
),
.names = "{.col}.color"
))
color_cols <- x[[1]] |>
select(tidyselect::contains(".color")) |>
names()
stopifnot(!identical(color_cols, character(0)))
o
for (color_col in color_cols) {
target_col <- gsub(pattern = ".color", replacement = "", color_col)
for (specific_color in unique(x[[1]][[color_col]])) {
x <- x |>
tab_style(
style = cell_fill(color = case_when(
specific_color == "green" ~ "palegreen3",
specific_color == "yellow" ~ "lightgoldenrodyellow",
specific_color == "red" ~ "darksalmon"
)),
locations = cells_body(
columns = target_col,
rows = .data[[{{ color_col }}]] == specific_color
)
)
}
}
View(x)
x[[1]] <- x[[1]] |>
select(-c(color_cols))
View(x)
x
add_color_code <- function(table, cols, range, colors) {
if(length(range) != 2 | length(colors) != 3) {
stop("You must specify a vector of 3 colors or a range of 2")
}
data <- table[[1]]
table[[1]] <- data |>
mutate(across(cols, ~ case_when(
. < range[1] ~ colors[1],
. >= range[1] & . < range[2] ~ colors[2],
. >= range[2] ~ colors[3]
),
.names = "{.col}.color"
))
color_cols <- table[[1]] |>
select(tidyselect::contains(".color")) |>
names()
stopifnot(!identical(color_cols, character(0)))
for (color_col in color_cols) {
target_col <- gsub(pattern = ".color", replacement = "", color_col)
for (specific_color in unique(x[[1]][[color_col]])) {
table <- table |>
tab_style(
style = cell_fill(color = case_when(
specific_color == "green" ~ "palegreen3",
specific_color == "yellow" ~ "lightgoldenrodyellow",
specific_color == "red" ~ "darksalmon"
)),
locations = cells_body(
columns = target_col,
rows = .data[[{{ color_col }}]] == specific_color
)
)
}
}
table[[1]] <- table[[1]] |>
select(-c(color_cols))
return(table)
}
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
add_color_code <- function(table, cols, range, colors) {
if(length(range) != 2 | length(colors) != 3) {
stop("You must specify a vector of 3 colors or a range of 2")
}
data <- table[[1]]
table[[1]] <- data |>
mutate(across(cols, ~ case_when(
. < range[1] ~ colors[1],
. >= range[1] & . < range[2] ~ colors[2],
. >= range[2] ~ colors[3]
),
.names = "{.col}.color"
))
color_cols <- table[[1]] |>
select(tidyselect::contains(".color")) |>
names()
stopifnot(!identical(color_cols, character(0)))
for (color_col in color_cols) {
target_col <- gsub(pattern = ".color", replacement = "", color_col)
for (specific_color in unique(x[[1]][[color_col]])) {
table <- table |>
tab_style(
style = cell_fill(color = case_when(
specific_color == colors[1] ~ colors[1],
specific_color == colors[2] ~ colors[2],
specific_color == colors[3] ~ colors[3]
)),
locations = cells_body(
columns = target_col,
rows = .data[[{{ color_col }}]] == specific_color
)
)
}
}
table[[1]] <- table[[1]] |>
select(-c(color_cols))
return(table)
}
add_color_code(x, "hp", c(500, 1500), c("darksalmon", "lightgoldenrodyellow", "palegreen3"))
View(x)
x <- add_color_code(x, "hp", c(500, 1500), c("darksalmon", "lightgoldenrodyellow", "palegreen3"))
x
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
x <- add_color_code(x, "hp", c(500, 1500), c("darksalmon", "lightgoldenrodyellow", "palegreen3"))
x
colors <- c("darksalmon", "lightgoldenrodyellow", "palegreen3")
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
table <- x
data <- table[[1]]
table[[1]] <- data |>
mutate(across(cols, ~ case_when(
. < range[1] ~ colors[1],
. >= range[1] & . < range[2] ~ colors[2],
. >= range[2] ~ colors[3]
),
.names = "{.col}.color"
))
color_cols <- table[[1]] |>
select(tidyselect::contains(".color")) |>
names()
stopifnot(!identical(color_cols, character(0)))
for (color_col in color_cols) {
target_col <- gsub(pattern = ".color", replacement = "", color_col)
for (specific_color in unique(x[[1]][[color_col]])) {
table <- table |>
tab_style(
style = cell_fill(color = case_when(
specific_color == colors[1] ~ colors[1],
specific_color == colors[2] ~ colors[2],
specific_color == colors[3] ~ colors[3]
)),
locations = cells_body(
columns = target_col,
rows = .data[[{{ color_col }}]] == specific_color
)
)
}
}
View(table)
table <- x
data <- table[[1]]
View(data)
table[[1]] <- data |>
mutate(across(cols, ~ case_when(
. < range[1] ~ colors[1],
. >= range[1] & . < range[2] ~ colors[2],
. >= range[2] ~ colors[3]
),
.names = "{.col}.color"
))
View(table)
View(table)
color_cols <- table[[1]] |>
select(tidyselect::contains(".color")) |>
names()
stopifnot(!identical(color_cols, character(0)))
for (color_col in color_cols) {
target_col <- gsub(pattern = ".color", replacement = "", color_col)
for (specific_color in unique(table[[1]][[color_col]])) {
table <- table |>
tab_style(
style = cell_fill(color = case_when(
specific_color == colors[1] ~ colors[1],
specific_color == colors[2] ~ colors[2],
specific_color == colors[3] ~ colors[3]
)),
locations = cells_body(
columns = target_col,
rows = .data[[{{ color_col }}]] == specific_color
)
)
}
}
table[[1]] <- table[[1]] |>
select(-c(color_cols))
table
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
x
x <- add_color_code(x, "hp", c(500, 1500), c("darksalmon", "lightgoldenrodyellow", "palegreen3"))
add_color_code <- function(table, cols, range, colors) {
if(length(range) != 2 | length(colors) != 3) {
stop("You must specify a vector of 3 colors or a range of 2")
}
data <- table[[1]]
table[[1]] <- data |>
mutate(across(cols, ~ case_when(
. < range[1] ~ colors[1],
. >= range[1] & . < range[2] ~ colors[2],
. >= range[2] ~ colors[3]
),
.names = "{.col}.color"
))
color_cols <- table[[1]] |>
select(tidyselect::contains(".color")) |>
names()
stopifnot(!identical(color_cols, character(0)))
for (color_col in color_cols) {
target_col <- gsub(pattern = ".color", replacement = "", color_col)
for (specific_color in unique(table[[1]][[color_col]])) {
table <- table |>
tab_style(
style = cell_fill(color = case_when(
specific_color == colors[1] ~ colors[1],
specific_color == colors[2] ~ colors[2],
specific_color == colors[3] ~ colors[3]
)),
locations = cells_body(
columns = target_col,
rows = .data[[{{ color_col }}]] == specific_color
)
)
}
}
table[[1]] <- table[[1]] |>
select(-c(color_cols))
return(table)
}
x <- add_color_code(x, "hp", c(500, 1500), c("darksalmon", "lightgoldenrodyellow", "palegreen3"))
x
x <- add_color_code(x, c("hp", "trq"), c(500, 1500), c("darksalmon", "lightgoldenrodyellow", "palegreen3"))
x
x <- add_color_code(x, names(x), c(500, 1500), c("darksalmon", "lightgoldenrodyellow", "palegreen3"))
x <- add_color_code(x, names(x[[1]]), c(500, 1500), c("darksalmon", "lightgoldenrodyellow", "palegreen3"))
x
x <- add_color_code(x, names(x[[1]]), c(500, 1500), c("darksalmon", "grey", "palegreen3"))
x
quantile(x[[1]])
quantile(x[[1]][["hp"]])
y <- quantile(x[[1]][["hp"]])
quantile(gtcars[["hp"]])
quantile(gtcars[["hp", "trq"]])
quantile(gtcars[["hp"]])
quantile(gtcars[["hp"]])[2, 4]
quantile(gtcars[["hp"]])[2]
range <- quantile(table[[1]][[col]])[c(2, 4)]
range <- quantile(table[[1]][[col]])["25%"]
unname(quantile(gtcars[["hp"]]))
unname(quantile(gtcars[["hp"]]))[c(2, 4)]
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
x <- add_color_code(x, names(x[[1]]), c(500, 1500), c("darksalmon", "grey", "palegreen3"))
x
x <- add_color_code(x, "hp", c(500, 1500), c("darksalmon", "grey", "palegreen3"))
x
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
x <- add_color_code(x, "hp", c(500, 1500), c("darksalmon", "grey", "palegreen3"))
x
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
x <- add_color_code(x, "hp", c(500, 1500))
add_color_code <- function(table, col, bounds = NULL, colors = NULL) {
if (identical(bounds, NULL)) {
bounds <- unname(quantile(table[[1]][[col]]))[c(2, 4)]
}
if (identical(colors, NULL)) {
colors <- c("palegreen3", "lightgoldenrodyellow", "darksalmon")
}
if(length(bounds) != 2) {
stop("You must specify a vector containing a lower and upper bound")
}
if(length(colors) != 3) {
stop("You must specify a vector containing 3 colors")
}
table[[1]] <- table[[1]] |>
mutate(across(col, ~ case_when(
. < bounds[1] ~ colors[1],
. >= bounds[1] & . < bounds[2] ~ colors[2],
. >= bounds[2] ~ colors[3]
),
.names = "{.col}.color"
))
color_cols <- table[[1]] |>
select(tidyselect::contains(".color")) |>
names()
stopifnot(!identical(color_cols, character(0)))
for (color_col in color_cols) {
target_col <- gsub(pattern = ".color", replacement = "", color_col)
for (specific_color in unique(table[[1]][[color_col]])) {
table <- table |>
tab_style(
style = cell_fill(color = case_when(
specific_color == colors[1] ~ colors[1],
specific_color == colors[2] ~ colors[2],
specific_color == colors[3] ~ colors[3]
)),
locations = cells_body(
columns = target_col,
rows = .data[[{{ color_col }}]] == specific_color
)
)
}
}
table[[1]] <- table[[1]] |>
select(-c(color_cols))
return(table)
}
x <- add_color_code(x, "hp", c(500, 1500))
x
quantile(gtcars[["hp"]], probs = .33)
quantile(gtcars[["hp"]], probs = c(.33, .66))
quantile(gtcars[["hp"]], probs = c(.334, .667))
quantile(gtcars[["hp"]], probs = c(.333, .667))
add_color_code <- function(table, col, bounds = NULL, colors = NULL) {
if (identical(bounds, NULL)) {
bounds <- unname(quantile(table[[1]][[col]], probs = c(.333, .667)))
}
if (identical(colors, NULL)) {
colors <- c("palegreen3", "lightgoldenrodyellow", "darksalmon")
}
if(length(bounds) != 2) {
stop("You must specify a vector containing a lower and upper bound")
}
if(length(colors) != 3) {
stop("You must specify a vector containing 3 colors")
}
table[[1]] <- table[[1]] |>
mutate(across(col, ~ case_when(
. < bounds[1] ~ colors[1],
. >= bounds[1] & . < bounds[2] ~ colors[2],
. >= bounds[2] ~ colors[3]
),
.names = "{.col}.color"
))
color_cols <- table[[1]] |>
select(tidyselect::contains(".color")) |>
names()
stopifnot(!identical(color_cols, character(0)))
for (color_col in color_cols) {
target_col <- gsub(pattern = ".color", replacement = "", color_col)
for (specific_color in unique(table[[1]][[color_col]])) {
table <- table |>
tab_style(
style = cell_fill(color = case_when(
specific_color == colors[1] ~ colors[1],
specific_color == colors[2] ~ colors[2],
specific_color == colors[3] ~ colors[3]
)),
locations = cells_body(
columns = target_col,
rows = .data[[{{ color_col }}]] == specific_color
)
)
}
}
table[[1]] <- table[[1]] |>
select(-c(color_cols))
return(table)
}
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
x <- add_color_code(x, "hp", c(500, 1500))
x
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
x <- add_color_code(x, "hp")
x
usethis::use_r("add_color_code")
load_all()
load_all()
load_all()
load_all()
load_all()
document()
load_all()
load_all()
tableclothr::tablecloth(gtcars, is_color_coded = TRUE)
git checkout -b color-coding
cols <- c(1, 2, 3, 4, 5)
seq(length(cols))
cols <- c(1, 4, 4, 4, 4)
seq(length(cols))
document()
load_all()
tableclothr::add_color_codes(gtcars, cols = c("hp", "hp_rpm", "trq", "trq_rpm"))
load_all()
tableclothr::add_color_codes(gtcars, cols = c("hp", "hp_rpm", "trq", "trq_rpm"))
load_all()
tableclothr::add_color_codes(gtcars, cols = c("hp", "hp_rpm", "trq", "trq_rpm"))
load_all()
tableclothr::add_color_codes(gtcars, cols = c("hp", "hp_rpm", "trq", "trq_rpm"))
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm", "trq", "trq_rpm"))
x
load_all()
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm", "trq", "trq_rpm"))
load_all()
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm", "trq", "trq_rpm"))
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm", "trq", "trq_rpm", "mpg_c"))
usethis::rename_files("aggregate_table", "aggregating")
usethis::rename_files("add_color_code", "color_coding")
usethis::rename_files("group_table", "grouping")
x <- tableclothr::tablecloth(gtcars, rowname_col = "year", group_col = "mfr", aggregate_by = "sum", format = "static")
x
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm"), bounds_list = list(c(500, 1500), c(10000, 20000)))
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm"), bounds_list = list(c(500, 1500), c(10000, 20000)))
x
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm"), bounds_list = list(c(500, 1500), c(10000, 20000)))
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm"), bounds_list = c(c(500, 1500), c(10000, 20000)))
abort
q
exit
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm"), bounds_list = c(c(500, 1500), c(10000, 20000)))
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm"), bounds_list = c(c(500, 1500), c(10000, 20000)))
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm"), bounds_list = c(c(500, 1500), c(10000, 20000)))
bounds_list = c(c(500, 1500), c(10000, 20000))
bounds_list = list(c(500, 1500), c(10000, 20000))
bounds_list[1]
bounds_list[[1]]
bounds_list[1,]
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm"), bounds_list = list(c(500, 1500), c(10000, 20000)))
load_all()
tableclothr::add_color_codes(x, cols = c("hp", "hp_rpm"), bounds_list = list(c(500, 1500), c(10000, 20000)))
!identical(names(gtcars), names(gt(mtcars)))
!identical(names(gt(gtcars)), names(gt(mtcars)))
document()
